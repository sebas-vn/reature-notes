package com.revature.producerconsumer;

public class Holder {
	
	int contents = 0;
	private boolean isAvailable = false;
	
	/**
	 * This class will hold all of the values generated by another thread
	 * 
	 * And it will contain synchronized methods for getting and setting values
	 */
	
	public synchronized int getVal() {
		// this weill return the value of the holder to the consumer
		
		while(!isAvailable) {
			try {
				wait(); // this method forces the current thread to wait until some other thread
						// invokes notify() or notifyuAll() on the same object
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		isAvailable = false;
		notifyAll();
		
		return contents;
	}
	
	public synchronized void setVal(int val) {
		// this method will be invoked by the producer
		
		while(isAvailable) {
			try {
				wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			contents = val;
			isAvailable = true;
			notifyAll();
		}
	}

}
